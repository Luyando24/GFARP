// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Football Academy Model
model Academy {
  id            String   @id @default(cuid())
  name          String
  email         String   @unique
  password      String
  contactPerson String
  phone         String
  address       String
  city          String
  country       String
  licenseNumber String?  @unique
  foundedYear   Int?
  website       String?
  description   String?
  isActive      Boolean  @default(true)
  isVerified    Boolean  @default(false)
  storageUsed   BigInt   @default(0) // in bytes
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  subscriptions Subscription[]
  players       Player[]
  documents     Document[]
  payments      Payment[]
  activities    Activity[]

  @@map("academies")
}

// Player Model
model Player {
  id                String    @id @default(cuid())
  academyId         String
  firstName         String
  lastName          String
  dateOfBirth       DateTime
  nationality       String
  position          String
  height            Float? // in cm
  weight            Float? // in kg
  email             String?
  phone             String?
  currentClub       String?
  trainingStartDate DateTime?
  trainingEndDate   DateTime?
  internalNotes     String?
  isActive          Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  academy   Academy    @relation(fields: [academyId], references: [id], onDelete: Cascade)
  documents Document[]

  @@map("players")
}

// Subscription Plans Model
model SubscriptionPlan {
  id           String   @id @default(cuid())
  name         String   @unique // Basic, Pro, Elite
  description  String?
  price        Decimal  @db.Decimal(10, 2)
  currency     String   @default("USD")
  playerLimit  Int // 20, 100, -1 (unlimited)
  storageLimit BigInt // in bytes: 500MB, 2GB, 10GB
  features     Json // JSON array of features
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  subscriptions Subscription[]

  @@map("subscription_plans")
}

// Active Subscriptions Model
model Subscription {
  id        String             @id @default(cuid())
  academyId String
  planId    String
  status    SubscriptionStatus @default(ACTIVE)
  startDate DateTime           @default(now())
  endDate   DateTime?
  autoRenew Boolean            @default(true)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  // Relations
  academy  Academy          @relation(fields: [academyId], references: [id])
  plan     SubscriptionPlan @relation(fields: [planId], references: [id])
  payments Payment[]

  @@map("subscriptions")
}

// Document Storage Model
model Document {
  id           String       @id @default(cuid())
  academyId    String
  playerId     String?
  fileName     String
  originalName String
  fileSize     BigInt // in bytes
  mimeType     String
  documentType DocumentType
  fileUrl      String
  uploadedAt   DateTime     @default(now())
  isVerified   Boolean      @default(false)
  verifiedAt   DateTime?
  verifiedBy   String? // Admin ID who verified

  // Relations
  academy Academy @relation(fields: [academyId], references: [id], onDelete: Cascade)
  player  Player? @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@map("documents")
}

// Payment Records Model
model Payment {
  id             String        @id @default(cuid())
  academyId      String
  subscriptionId String
  amount         Decimal       @db.Decimal(10, 2)
  currency       String        @default("USD")
  status         PaymentStatus @default(PENDING)
  paymentMethod  String // stripe, paypal, etc.
  transactionId  String?       @unique
  paymentDate    DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relations
  academy      Academy      @relation(fields: [academyId], references: [id])
  subscription Subscription @relation(fields: [subscriptionId], references: [id])

  @@map("payments")
}

// Admin Users Model
model Admin {
  id          String    @id @default(cuid())
  email       String    @unique
  password    String
  firstName   String
  lastName    String
  role        AdminRole @default(ADMIN)
  isActive    Boolean   @default(true)
  lastLoginAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  activities Activity[]

  @@map("admins")
}

// Activity Log Model
model Activity {
  id          String   @id @default(cuid())
  academyId   String?
  adminId     String?
  action      String // "player_created", "document_uploaded", etc.
  description String
  metadata    Json? // Additional data about the action
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())

  // Relations
  academy Academy? @relation(fields: [academyId], references: [id])
  admin   Admin?   @relation(fields: [adminId], references: [id])

  @@map("activities")
}

// System Settings Model
model SystemSetting {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("system_settings")
}

// Enums
enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
  EXPIRED
  SUSPENDED
}

enum DocumentType {
  PASSPORT
  ID_CARD
  PLAYER_PHOTO
  PROOF_OF_TRAINING
  BIRTH_CERTIFICATE
  CONTRACT
  MEDICAL_CERTIFICATE
  OTHER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  MODERATOR
}
